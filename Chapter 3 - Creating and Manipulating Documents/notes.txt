1) insert three test documents:

db.inspections.insert([ { "test": 1 }, { "test": 2 }, { "test": 3 } ])
i
2) Insert three test documents but specify the _id values:

db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },
                       { "_id": 3, "test": 3 }])

3) Find the documents with _id: 1

db.inspections.find({ "_id": 1 })

4) Insert multiple documents specifying the _id values, and using the "ordered": false option.

db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },
                       { "_id": 3, "test": 3 }],{ "ordered": false })

UPDATE ELEMENT COMMANDS

1) Update all documents in the zips collection where the city field is equal to "HUDSON" by adding 10 to the current value of the "pop" field.

db.zips.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": 10 } })

2) Update a single document in the zips collection where the zip field is equal to "12534" by setting the value of the "pop" field to 17630.

db.zips.updateOne({ "zip": "12534" }, { "$set": { "pop": 17630 } })

3) Update a single document in the zips collection where the zip field is equal to "12534" by setting the value of the "population" field to 17630.

db.zips.updateOne({ "zip": "12534" }, { "$set": { "population": 17630 } })

4) Find all documents in the grades collection where the student_id field is 151 , and the class_id field is 339.

db.grades.find({ "student_id": 151, "class_id": 339 }).pretty()

5) Find all documents in the grades collection where the student_id field is 250 , and the class_id field is 339.

db.grades.find({ "student_id": 250, "class_id": 339 }).pretty()

6) Update one document in the grades collection where the student_id is ``250`` *, and the class_id field is 339 , by adding a document element to the "scores" array.

db.grades.updateOne({ "student_id": 250, "class_id": 339 },
                    { "$push": { "scores": { "type": "extra credit",
                                             "score": 100 }
                                }
                     })

DELETEING COMMANDS
1) Delete all the documents that have test field equal to 1.
db.inspections.deleteMany({ "test": 1 })

2) Delete one document that has test field equal to 3.
db.inspections.deleteOne({ "test": 3 })

3) Inspect what is left of the inspection collection.
db.inspection.find().pretty()

4) View what collections are present in the sample_training collection.
show collections

5) Drop the inspection collection.
db.inspection.drop()